// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  name       String?
  email      String       @unique
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  submission Submission[]
}

model Problem {
  id          String        @id @default(uuid())
  title       String
  description String
  hidden      Boolean       @default(true)
  slug        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  difficulty  Difficulty    @default(MEDIUM)
  defaultCode DefaultCode[]
  submission  Submission[]
}

model DefaultCode {
  id         String   @id @default(uuid())
  languageId Int
  problemId  String
  code       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  problem    Problem  @relation(fields: [problemId], references: [id])
  language   Language @relation(fields: [languageId], references: [id])
  @@unique([problemId,languageId])
}

model Submission {
  id         String           @id @default(uuid())
  problemId  String
  languageId Int
  userId     String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  code       String
  FullCode   String
  status     SubmissionResult @default(PENDING)
  testCases  TestCase[]
  memory     Int?
  time       Float?
  user       User             @relation(fields: [userId], references: [id])
  problem    Problem          @relation(fields: [problemId], references: [id])
  language   Language         @relation(fields: [languageId], references: [id])
}

model TestCase {
  id               String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  status           TestCaseResult @default(PENDING)
  index            Int
  submission       Submission     @relation(fields: [submissionId], references: [id])
  submissionId     String
  memory           Int?
  time             Float?
  judge0TrackingId String         @unique
}

model Language {
  id          Int        @id @default(autoincrement())
  name        String
  judge0Id    Int           @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  submission  Submission[]
  defaultCode DefaultCode[]
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionResult {
  AC
  PENDING
  REJECTED
}

enum TestCaseResult {
  AC
  FAIL
  TLE
  COMPILATION_ERROR
  PENDING
}
